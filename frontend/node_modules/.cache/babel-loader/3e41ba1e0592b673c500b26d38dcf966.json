{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; //create localStorage for token\n//takes a key, which is our user token requested from our server. \n//stores user token to remember user\n\nconst useLocalStorage = key => {\n  _s();\n\n  //create a variable that captures the key/token we are searching for as the useState value\n  const initialValue = localStorage.getItem(key) || null;\n  const [storage, setStorage] = useState(initialValue); //when custom hook is used token is set to the local storage on load\n\n  useEffect(() => {\n    if (storage === null) {\n      //if key has no value, remove it\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, storage);\n    }\n  }, [key, storage]);\n  return [storage, setStorage];\n};\n\n_s(useLocalStorage, \"D0VvrQNJHMl2TGq8BLs1J/BRoiE=\");\n\nexport default useLocalStorage;","map":{"version":3,"sources":["/Users/anyone/Desktop/Coding/SB Bootcamp/Capstone-Project-2/BuyMe/frontend/src/components/custom-hooks/useLocalStorage.js"],"names":["useState","useEffect","useLocalStorage","key","initialValue","localStorage","getItem","storage","setStorage","removeItem","setItem"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC,C,CAEA;AACA;AACA;;AAEA,MAAMC,eAAe,GAAIC,GAAD,IAAS;AAAA;;AAC7B;AACA,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqBH,GAArB,KAA6B,IAAlD;AAEA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAACI,YAAD,CAAtC,CAJ6B,CAM7B;;AACAH,EAAAA,SAAS,CAAC,MAAK;AAEf,QAAIM,OAAO,KAAK,IAAhB,EAAsB;AAClB;AACAF,MAAAA,YAAY,CAACI,UAAb,CAAwBN,GAAxB;AACH,KAHD,MAGO;AACHE,MAAAA,YAAY,CAACK,OAAb,CAAqBP,GAArB,EAA0BI,OAA1B;AACH;AACA,GARQ,EAQN,CAACJ,GAAD,EAAMI,OAAN,CARM,CAAT;AAUA,SAAO,CAACA,OAAD,EAAUC,UAAV,CAAP;AACH,CAlBD;;GAAMN,e;;AAoBN,eAAeA,eAAf","sourcesContent":["import {useState, useEffect} from 'react'\n\n//create localStorage for token\n//takes a key, which is our user token requested from our server. \n//stores user token to remember user\n\nconst useLocalStorage = (key) => {\n    //create a variable that captures the key/token we are searching for as the useState value\n    const initialValue = localStorage.getItem(key) || null\n\n    const [storage, setStorage] = useState(initialValue)  \n\n    //when custom hook is used token is set to the local storage on load\n    useEffect(()=> {\n\n    if (storage === null) {\n        //if key has no value, remove it\n        localStorage.removeItem(key); \n    } else {\n        localStorage.setItem(key, storage);\n    }\n    }, [key, storage])\n    \n    return [storage, setStorage];\n}\n\nexport default useLocalStorage"]},"metadata":{},"sourceType":"module"}