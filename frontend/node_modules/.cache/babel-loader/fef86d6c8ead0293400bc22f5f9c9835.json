{"ast":null,"code":"var _jsxFileName = \"/Users/anyone/Desktop/Coding/SB Bootcamp/Capstone-Project-2/frontend/src/components/AppContextWrapper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AppContext from './AppContext';\nimport User from './api';\nimport useLocalStorage from './custom-hooks/useLocalStorage';\nimport jwt from 'jsonwebtoken';\nimport LoadSpinner from './commons/LoadSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppContextWrapper = ({\n  children\n}) => {\n  _s();\n\n  const localStorageKey = \"token\";\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(localStorageKey);\n  const [loading, setLoading] = useState(false);\n  const history = useHistory(); //TODO: apply token on useEffect. Check to see if the user is logged in (currentUser)\n  //Apply private routes if(!currentUser)\n  //Change navbar when currentUser/logout button\n  //Update profile route for user info and edit/delete feature(API Requests)\n  //Look for API on what to build on the website.\n\n  useEffect(() => {\n    const getCurrentUser = async () => {\n      //getting the current user using the token we stored in localStorage\n      //if token, get current user by decoding the token object\n      if (token) {\n        try {\n          const {\n            id\n          } = jwt.decode(token);\n          const user = await User.getUserId(id);\n          delete user.data.password; //deletes hashed password to not show on data\n\n          setCurrentUser(user);\n        } catch (e) {\n          return e;\n        }\n\n        setLoading(true);\n      }\n    };\n\n    getCurrentUser();\n  }, [token]);\n\n  const register = async userInfo => {\n    const res = await User.register(userInfo);\n\n    if (res.data) {\n      setToken(res.data.token); //store token on localStorage when registered\n    }\n\n    return res;\n  };\n\n  const login = async loginInfo => {\n    const res = await User.login(loginInfo);\n\n    if (res.data) {\n      setToken(res.data.token); //store token on localStorage when logged in\n    }\n\n    return res;\n  };\n\n  const logout = () => {\n    setCurrentUser(null);\n    history.push('/login');\n  };\n\n  const editUser = async id => {\n    const res = await User.editUser(id);\n    setCurrentUser(res);\n    return res;\n  };\n\n  if (!loading) return /*#__PURE__*/_jsxDEV(LoadSpinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 25\n  }, this); //if anything is not loaded on the page, render this component\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        currentUser,\n        register,\n        login,\n        logout,\n        token,\n        editUser\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppContextWrapper, \"FTeL/hiGmagR7U4XSwP9HFKQ4vo=\", false, function () {\n  return [useLocalStorage, useHistory];\n});\n\n_c = AppContextWrapper;\nexport default AppContextWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppContextWrapper\");","map":{"version":3,"sources":["/Users/anyone/Desktop/Coding/SB Bootcamp/Capstone-Project-2/frontend/src/components/AppContextWrapper.js"],"names":["React","useState","useEffect","useHistory","AppContext","User","useLocalStorage","jwt","LoadSpinner","AppContextWrapper","children","localStorageKey","currentUser","setCurrentUser","token","setToken","loading","setLoading","history","getCurrentUser","id","decode","user","getUserId","data","password","e","register","userInfo","res","login","loginInfo","logout","push","editUser"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,OAAjB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AACtC,QAAMC,eAAe,GAAG,OAAxB;AAEA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBT,eAAe,CAACK,eAAD,CAAzC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMiB,OAAO,GAAGf,UAAU,EAA1B,CAPsC,CAStC;AACA;AACA;AACA;AACA;;AAEAD,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMiB,cAAc,GAAG,YAAU;AAC7B;AACA;AACJ,UAAGL,KAAH,EAAS;AACL,YAAG;AACH,gBAAM;AAACM,YAAAA;AAAD,cAAOb,GAAG,CAACc,MAAJ,CAAWP,KAAX,CAAb;AACA,gBAAMQ,IAAI,GAAG,MAAMjB,IAAI,CAACkB,SAAL,CAAeH,EAAf,CAAnB;AACA,iBAAOE,IAAI,CAACE,IAAL,CAAUC,QAAjB,CAHG,CAGuB;;AAC1BZ,UAAAA,cAAc,CAACS,IAAD,CAAd;AAEH,SANG,CAMH,OAAMI,CAAN,EAAQ;AACL,iBAAOA,CAAP;AACH;;AACDT,QAAAA,UAAU,CAAC,IAAD,CAAV;AACC;AAAC,KAdF;;AAeAE,IAAAA,cAAc;AACjB,GAjBQ,EAiBN,CAACL,KAAD,CAjBM,CAAT;;AAmBA,QAAMa,QAAQ,GAAG,MAAMC,QAAN,IAAmB;AAChC,UAAMC,GAAG,GAAG,MAAMxB,IAAI,CAACsB,QAAL,CAAcC,QAAd,CAAlB;;AACA,QAAGC,GAAG,CAACL,IAAP,EAAY;AACRT,MAAAA,QAAQ,CAACc,GAAG,CAACL,IAAJ,CAASV,KAAV,CAAR,CADQ,CACiB;AAC5B;;AACD,WAAOe,GAAP;AACH,GAND;;AAQA,QAAMC,KAAK,GAAG,MAAMC,SAAN,IAAoB;AAC9B,UAAMF,GAAG,GAAG,MAAMxB,IAAI,CAACyB,KAAL,CAAWC,SAAX,CAAlB;;AACA,QAAGF,GAAG,CAACL,IAAP,EAAY;AACRT,MAAAA,QAAQ,CAACc,GAAG,CAACL,IAAJ,CAASV,KAAV,CAAR,CADQ,CACiB;AAC5B;;AACD,WAAOe,GAAP;AACH,GAND;;AAQA,QAAMG,MAAM,GAAG,MAAM;AACjBnB,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAK,IAAAA,OAAO,CAACe,IAAR,CAAa,QAAb;AACH,GAHD;;AAKA,QAAMC,QAAQ,GAAG,MAAMd,EAAN,IAAa;AAC1B,UAAMS,GAAG,GAAG,MAAMxB,IAAI,CAAC6B,QAAL,CAAcd,EAAd,CAAlB;AACAP,IAAAA,cAAc,CAACgB,GAAD,CAAd;AACA,WAAOA,GAAP;AACH,GAJD;;AAKA,MAAG,CAACb,OAAJ,EAAa,oBAAO,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,UAAP,CA5DyB,CA4DH;;AAEnC,sBACI;AAAA,2BACI,QAAC,UAAD,CAAY,QAAZ;AAAqB,MAAA,KAAK,EAAE;AAACJ,QAAAA,WAAD;AAAce,QAAAA,QAAd;AAAwBG,QAAAA,KAAxB;AAA+BE,QAAAA,MAA/B;AAAuClB,QAAAA,KAAvC;AAA8CoB,QAAAA;AAA9C,OAA5B;AAAA,gBACCxB;AADD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CArED;;GAAMD,iB;UAIwBH,e,EAGVH,U;;;KAPdM,iB;AAuEN,eAAeA,iBAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {useHistory} from 'react-router-dom'\nimport AppContext from './AppContext'\nimport User from './api'\nimport useLocalStorage from './custom-hooks/useLocalStorage'\nimport jwt from 'jsonwebtoken'\nimport LoadSpinner from './commons/LoadSpinner'\n\nconst AppContextWrapper = ({children}) => {\n    const localStorageKey = \"token\"\n\n    const [currentUser, setCurrentUser] = useState(null)\n    const [token, setToken] = useLocalStorage(localStorageKey) \n    const [loading, setLoading] = useState(false)\n\n    const history = useHistory()\n\n    //TODO: apply token on useEffect. Check to see if the user is logged in (currentUser)\n    //Apply private routes if(!currentUser)\n    //Change navbar when currentUser/logout button\n    //Update profile route for user info and edit/delete feature(API Requests)\n    //Look for API on what to build on the website.\n\n    useEffect(()=> {\n        const getCurrentUser = async()=> {\n            //getting the current user using the token we stored in localStorage\n            //if token, get current user by decoding the token object\n        if(token){\n            try{\n            const {id} = jwt.decode(token)\n            const user = await User.getUserId(id)\n            delete user.data.password //deletes hashed password to not show on data\n            setCurrentUser(user)\n\n        }catch(e){\n            return e\n        }\n        setLoading(true)\n        }}\n        getCurrentUser()\n    }, [token])\n\n    const register = async(userInfo) => {\n        const res = await User.register(userInfo)\n        if(res.data){\n            setToken(res.data.token) //store token on localStorage when registered\n        }\n        return res\n    }\n\n    const login = async(loginInfo) => {\n        const res = await User.login(loginInfo)\n        if(res.data){   \n            setToken(res.data.token) //store token on localStorage when logged in\n        }\n        return res \n    }\n\n    const logout = () => {\n        setCurrentUser(null)\n        history.push('/login') \n    }\n    \n    const editUser = async(id) => {\n        const res = await User.editUser(id)\n        setCurrentUser(res)\n        return res\n    }\n    if(!loading) return <LoadSpinner/> //if anything is not loaded on the page, render this component\n\n    return (\n        <div>\n            <AppContext.Provider value={{currentUser, register, login, logout, token, editUser}}>\n            {children}\n            </AppContext.Provider>\n        </div>\n    )\n}\n\nexport default AppContextWrapper"]},"metadata":{},"sourceType":"module"}