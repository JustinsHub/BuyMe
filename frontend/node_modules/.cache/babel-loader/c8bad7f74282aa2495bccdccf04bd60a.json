{"ast":null,"code":"var _jsxFileName = \"/Users/anyone/Desktop/Coding/SB Bootcamp/Capstone-Project-2/Pickout/frontend/src/components/AppContextWrapper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AppContext from './AppContext';\nimport User from './users/usersApi';\nimport useLocalStorage from './custom-hooks/useLocalStorage';\nimport jwt from 'jsonwebtoken';\nimport LoadSpinner from './commons/LoadSpinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppContextWrapper = ({\n  children\n}) => {\n  _s();\n\n  const localStorageKey = \"token\";\n  const [currentUser, setCurrentUser] = useState(null);\n  const [currentAddress, setCurrentAddress] = useState(null);\n  const [token, setToken] = useLocalStorage(localStorageKey);\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  useEffect(() => {\n    const getCurrentUser = async () => {\n      //getting the current user using the token we stored in localStorage (from register/login)\n      //if token, get current user by decoding the token object\n      if (token) {\n        try {\n          const {\n            id\n          } = jwt.decode(token);\n          const user = await User.getUserId(id);\n          const address = await User.getUserAddress(id);\n          delete user.data.password; //deletes hashed password to not show on data\n\n          setCurrentUser(user);\n          setCurrentAddress(address);\n        } catch (e) {\n          return e;\n        }\n      }\n    };\n\n    setLoading(true);\n    getCurrentUser();\n  }, [token]); //requests to register // creates jwt // sets token token to local storage\n\n  const register = async userInfo => {\n    const res = await User.register(userInfo);\n\n    if (res.data) {\n      setToken(res.data.token); //store token on localStorage when registered\n    }\n\n    return res;\n  }; //requests to login // checks jwt // sets token token to local storage\n\n\n  const login = async loginInfo => {\n    const res = await User.login(loginInfo);\n\n    if (res.data) {\n      setToken(res.data.token); //store token on localStorage when logged in\n    }\n\n    return res;\n  }; //redirects after setting the currentUser to null and clearing localStorage when executed\n\n\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('token');\n    history.push('/login');\n  }; //updates user; user's id as first parameter and updated values for second. Must setCurrentUser to render correctly\n\n\n  const updateUser = async (id, userInfo, addressInfo) => {\n    const userResults = await User.updateUser(id, userInfo);\n    const addressResults = await User.updateAddress(id, addressInfo);\n    setCurrentUser(userResults);\n    setCurrentAddress(addressResults);\n    return userResults;\n  }; //requests to delete user and set the currentUser to back to null\n\n\n  const deleteUser = async id => {\n    // const checkPassword = await User.checkPassword(id, userInfo) // keep for now for future feature?\n    // if(!checkPassword){\n    //     console.log('wrong')\n    // }\n    const res = await User.deleteUser(id);\n    setCurrentUser(null);\n    return res;\n  };\n\n  if (!loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Loading-global\",\n    children: [/*#__PURE__*/_jsxDEV(LoadSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 57\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center m-2\",\n      children: \"Loading deliciousness...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 72\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 25\n  }, this); //if anything is not loaded on the page, render this component\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        currentUser,\n        currentAddress,\n        register,\n        login,\n        logout,\n        token,\n        updateUser,\n        deleteUser\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppContextWrapper, \"UQRRBFfmDoLZ8yoclBh64kTzORo=\", false, function () {\n  return [useLocalStorage, useHistory];\n});\n\n_c = AppContextWrapper;\nexport default AppContextWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppContextWrapper\");","map":{"version":3,"sources":["/Users/anyone/Desktop/Coding/SB Bootcamp/Capstone-Project-2/Pickout/frontend/src/components/AppContextWrapper.js"],"names":["React","useState","useEffect","useHistory","AppContext","User","useLocalStorage","jwt","LoadSpinner","AppContextWrapper","children","localStorageKey","currentUser","setCurrentUser","currentAddress","setCurrentAddress","token","setToken","loading","setLoading","history","getCurrentUser","id","decode","user","getUserId","address","getUserAddress","data","password","e","register","userInfo","res","login","loginInfo","logout","localStorage","removeItem","push","updateUser","addressInfo","userResults","addressResults","updateAddress","deleteUser"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {useHistory} from 'react-router-dom'\nimport AppContext from './AppContext'\nimport User from './users/usersApi'\nimport useLocalStorage from './custom-hooks/useLocalStorage'\nimport jwt from 'jsonwebtoken'\nimport LoadSpinner from './commons/LoadSpinner'\n\nconst AppContextWrapper = ({children}) => {\n    const localStorageKey = \"token\"\n\n    const [currentUser, setCurrentUser] = useState(null)\n    const [currentAddress, setCurrentAddress] = useState(null)\n    const [token, setToken] = useLocalStorage(localStorageKey) \n    const [loading, setLoading] = useState(false)\n\n    const history = useHistory()\n\n    useEffect(()=> {\n        const getCurrentUser = async()=> {\n            //getting the current user using the token we stored in localStorage (from register/login)\n            //if token, get current user by decoding the token object\n        if(token){\n            try{\n            const {id} = jwt.decode(token)\n            const user = await User.getUserId(id)\n            const address = await User.getUserAddress(id)\n            delete user.data.password //deletes hashed password to not show on data\n            setCurrentUser(user)\n            setCurrentAddress(address)\n            \n        }catch(e){\n            return e\n        }\n        }\n    }\n        setLoading(true)\n        getCurrentUser()\n    }, [token])\n\n    //requests to register // creates jwt // sets token token to local storage\n    const register = async(userInfo) => {\n        const res = await User.register(userInfo)\n        if(res.data){\n            setToken(res.data.token) //store token on localStorage when registered\n        }\n        return res\n    }\n\n    //requests to login // checks jwt // sets token token to local storage\n    const login = async(loginInfo) => {\n        const res = await User.login(loginInfo)\n        if(res.data){   \n            setToken(res.data.token) //store token on localStorage when logged in\n        }\n        return res \n    }\n\n    //redirects after setting the currentUser to null and clearing localStorage when executed\n    const logout = () => {\n        setCurrentUser(null)\n        localStorage.removeItem('token')\n        history.push('/login') \n    }\n\n    //updates user; user's id as first parameter and updated values for second. Must setCurrentUser to render correctly\n    const updateUser = async(id, userInfo, addressInfo) => {\n        const userResults = await User.updateUser(id, userInfo)\n        const addressResults = await User.updateAddress(id, addressInfo)\n        setCurrentUser(userResults)\n        setCurrentAddress(addressResults)\n        return userResults\n    }\n    //requests to delete user and set the currentUser to back to null\n    const deleteUser = async(id) => {\n        // const checkPassword = await User.checkPassword(id, userInfo) // keep for now for future feature?\n        // if(!checkPassword){\n        //     console.log('wrong')\n        // }\n        const res = await User.deleteUser(id)\n        setCurrentUser(null)\n        return res \n    }\n    \n    if(!loading) return <div className=\"Loading-global\"><LoadSpinner/> <p className=\"text-center m-2\">Loading deliciousness...</p></div> //if anything is not loaded on the page, render this component\n\n    return (\n        <div>\n            <AppContext.Provider value={{currentUser, currentAddress, register, login, logout, token, updateUser, deleteUser}}>\n            {children}\n            </AppContext.Provider>\n        </div>\n    )\n}\n\nexport default AppContextWrapper"]},"metadata":{},"sourceType":"module"}