{"ast":null,"code":"var _jsxFileName = \"/Users/anyone/Desktop/Coding/SB Bootcamp/Capstone-Project-2/frontend/src/components/AppContextWrapper.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport AppContext from './AppContext';\nimport User from './api';\nimport useLocalStorage from './custom-hooks/useLocalStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppContextWrapper = ({\n  children\n}) => {\n  _s();\n\n  const localStorageValue = \"local\";\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(localStorageValue);\n\n  const register = async userInfo => {\n    const res = await User.register(userInfo);\n\n    if (res.data) {\n      setToken(res.data.token);\n    }\n\n    return res;\n  };\n\n  const login = async loginInfo => {\n    const res = await User.login(loginInfo);\n\n    if (res.data) {\n      setToken(res.data.token); //set token in localstorage. Create a hook to store it. \n    }\n\n    return res;\n  }; //add values here\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        currentUser,\n        register,\n        login,\n        token\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppContextWrapper, \"HdG05yDoulPuadEN0P9qvC3j+Vs=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = AppContextWrapper;\nexport default AppContextWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppContextWrapper\");","map":{"version":3,"sources":["/Users/anyone/Desktop/Coding/SB Bootcamp/Capstone-Project-2/frontend/src/components/AppContextWrapper.js"],"names":["React","useState","AppContext","User","useLocalStorage","AppContextWrapper","children","localStorageValue","currentUser","setCurrentUser","token","setToken","register","userInfo","res","data","login","loginInfo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,OAAjB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AACtC,QAAMC,iBAAiB,GAAG,OAA1B;AAEA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBP,eAAe,CAACG,iBAAD,CAAzC;;AAEA,QAAMK,QAAQ,GAAG,MAAMC,QAAN,IAAmB;AAChC,UAAMC,GAAG,GAAG,MAAMX,IAAI,CAACS,QAAL,CAAcC,QAAd,CAAlB;;AACA,QAAGC,GAAG,CAACC,IAAP,EAAY;AACRJ,MAAAA,QAAQ,CAACG,GAAG,CAACC,IAAJ,CAASL,KAAV,CAAR;AACH;;AACD,WAAOI,GAAP;AACH,GAND;;AAQA,QAAME,KAAK,GAAG,MAAMC,SAAN,IAAoB;AAC9B,UAAMH,GAAG,GAAG,MAAMX,IAAI,CAACa,KAAL,CAAWC,SAAX,CAAlB;;AACA,QAAGH,GAAG,CAACC,IAAP,EAAY;AACRJ,MAAAA,QAAQ,CAACG,GAAG,CAACC,IAAJ,CAASL,KAAV,CAAR,CADQ,CACiB;AAC5B;;AACD,WAAOI,GAAP;AACH,GAND,CAdsC,CAqBtC;;;AACA,sBACI;AAAA,2BACI,QAAC,UAAD,CAAY,QAAZ;AAAqB,MAAA,KAAK,EAAE;AAACN,QAAAA,WAAD;AAAcI,QAAAA,QAAd;AAAwBI,QAAAA,KAAxB;AAA+BN,QAAAA;AAA/B,OAA5B;AAAA,gBACCJ;AADD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA7BD;;GAAMD,iB;UAIwBD,e;;;KAJxBC,iB;AA+BN,eAAeA,iBAAf","sourcesContent":["import React, {useState} from 'react'\nimport AppContext from './AppContext'\nimport User from './api'\nimport useLocalStorage from './custom-hooks/useLocalStorage'\n\nconst AppContextWrapper = ({children}) => {\n    const localStorageValue = \"local\"\n\n    const [currentUser, setCurrentUser] = useState(null)\n    const [token, setToken] = useLocalStorage(localStorageValue) \n\n    const register = async(userInfo) => {\n        const res = await User.register(userInfo)\n        if(res.data){\n            setToken(res.data.token)\n        }\n        return res\n    }\n\n    const login = async(loginInfo) => {\n        const res = await User.login(loginInfo)\n        if(res.data){   \n            setToken(res.data.token) //set token in localstorage. Create a hook to store it. \n        }\n        return res \n    }\n    //add values here\n    return (\n        <div>\n            <AppContext.Provider value={{currentUser, register, login, token}}>\n            {children}\n            </AppContext.Provider>\n        </div>\n    )\n}\n\nexport default AppContextWrapper"]},"metadata":{},"sourceType":"module"}